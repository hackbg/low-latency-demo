import {
    impersonateAccount,
    loadFixture,
} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { expect } from "chai";
import { ethers, upgrades } from "hardhat";

describe("DataStreamsConsumer", function () {
    async function setupFeed() {
        const [owner] = await ethers.getSigners();

        const feedsId = [
            "0x00029584363bcf642315133c335b3646513c20f049602fc7d933be0d3f6360d3",
            "0x0002c407f448ffe50a15fd5f1ffe4791830c5f8fa39cd971a3d6ae337aef51a0",
        ];
        const linkToken = "0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3";
        const verifier = "0xcB1241Fdf26501fA7A2d47d841dcF72C3CAa9dCe";

        const usdc = await ethers.getContractAt(
            "IERC20",
            "0x8FB1E3fC51F3b789dED7557E680551d93Ea9d892"
        );
        const router = await ethers.deployContract("UniswapRouter");
        const keeperRegistry = await ethers.deployContract(
            "KeeperRegistryMock"
        );

        const Consumer = await ethers.getContractFactory("DataStreamsConsumer");
        const dataStreamsConsumer = await upgrades.deployProxy(
            Consumer,
            [await router.getAddress(), verifier, linkToken, feedsId],
            {
                initializer: "initializer",
            }
        );
        const me = await ethers.getImpersonatedSigner(
            "0x17974d7C6558F00a22AC9eBdf896e39c4F6172b8"
        );

        await impersonateAccount("0x17974d7C6558F00a22AC9eBdf896e39c4F6172b8");

        await owner.sendTransaction({
            value: ethers.parseEther("1"),
            to: await me.getAddress(),
        });

        // send eth to consumer to verify reports
        await owner.sendTransaction({
            value: ethers.parseEther("1"),
            to: await dataStreamsConsumer.getAddress(),
        });

        return {
            owner,
            feedsId,
            linkToken,
            verifier,
            usdc,
            router,
            keeperRegistry,
            dataStreamsConsumer,
            me,
        };
    }
    async function setupAVAXFeed() {
        const { owner, usdc, router, keeperRegistry, dataStreamsConsumer, me } =
            await setupFeed();
        const avax = await ethers.getContractAt(
            "IERC20",
            "0x586A52Ca64f75b49a72e4CaEf5B91374257e1538"
        );

        return {
            me,
            avax,
            dataStreamsConsumer,
            owner,
            router,
            keeperRegistry,
            usdc,
        };
    }

    async function setupWETHFeed() {
        const { owner, usdc, router, keeperRegistry, dataStreamsConsumer, me } =
            await setupFeed();

        const weth = await ethers.getContractAt(
            "IERC20",
            "0xe39ab88f8a4777030a534146a9ca3b52bd5d43a3"
        );

        return {
            weth,
            dataStreamsConsumer,
            owner,
            router,
            keeperRegistry,
            usdc,
            me,
        };
    }

    describe("Swap", function () {
        it("Should swap funds with WETH", async function () {
            const { keeperRegistry, weth, dataStreamsConsumer, usdc, me } =
                await loadFixture(setupWETHFeed);

            await me.sendTransaction({
                to: weth,
                value: ethers.parseEther("0.1"),
            });

            await weth
                .connect(me)
                .approve(
                    await dataStreamsConsumer.getAddress(),
                    ethers.parseEther("1000000000000000000")
                );

            const oldBalance = await usdc.balanceOf(me);
            await weth.approve(
                await dataStreamsConsumer.getAddress(),
                ethers.parseEther("0.1")
            );

            const performData =
                "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002a0000649e2796239591d181cc09f64b3fbc29dad46278ff8da175e27fce7e2039c0000000000000000000000000000000000000000000000000000000003468002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000029584363bcf642315133c335b3646513c20f049602fc7d933be0d3f6360d300000000000000000000000000000000000000000000000000000000653bad5a00000000000000000000000000000000000000000000000000000000653bad5a00000000000000000000000000000000000000000000000000000000000015e000000000000000000000000000000000000000000000000000000000000dc50000000000000000000000000000000000000000000000000000000000653cfeda00000000000000000000000000000000000000000000006076c625174dbf000000000000000000000000000000000000000000000000000000000000000000024fa2f4321538082a65801f53952633981351bf90e3e6e0ac1480ec21b303ac0e70703e26bc603953e47df13e79ba1729e2207dd1eb2303cffc163f7d890b869b0000000000000000000000000000000000000000000000000000000000000002298ff7789059fc5adb811b50e848fee0f67c178d393297007e847cc75cc4b02476162745e03705415944faf2fd9552adf39576cef54fb50d3d993cac232825eb00000000000000000000000000000000000000000000000000000000000002a000065453f78825bb0dd871fbeca77fd3299256140ccace70282c90babddabd6d000000000000000000000000000000000000000000000000000000000310cd03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00002c407f448ffe50a15fd5f1ffe4791830c5f8fa39cd971a3d6ae337aef51a000000000000000000000000000000000000000000000000000000000653bad5a00000000000000000000000000000000000000000000000000000000653bad5a00000000000000000000000000000000000000000000000000000000000015e000000000000000000000000000000000000000000000000000000000000dc50000000000000000000000000000000000000000000000000000000000653cfeda0000000000000000000000000000000000000000000000009424f90bb8a963cc0000000000000000000000000000000000000000000000000000000000000002fc8129d67e2ad6d463d5d8a0e843f412f4847471af9fda7ee27e2128b893bd388767958b1a594361e716c3efa45f6b37ce218da4bea5b5fcda76d63e6cbc34f000000000000000000000000000000000000000000000000000000000000000022c41b55a44de0b579621a3d250a8ad7b54ef7c95f0318991f32e1e5ee93c1b165da3e33b2960bf55be86e9f506e55c569b6e04ce13e096c6378af2687308bd80000000000000000000000000000000000000000000000000000000000000012000000000000000000000000017974d7c6558f00a22ac9ebdf896e39c4f6172b8000000000000000000000000e39ab88f8a4777030a534146a9ca3b52bd5d43a30000000000000000000000008fb1e3fc51f3b789ded7557e680551d93ea9d892000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000042307830303032393538343336336263663634323331353133336333333562333634363531336332306630343936303266633764393333626530643366363336306433000000000000000000000000000000000000000000000000000000000000";
            await keeperRegistry.performUpkeep(
                dataStreamsConsumer,
                performData
            );

            const newBalance = await usdc.balanceOf(me);

            expect(newBalance).to.be.greaterThan(oldBalance);
        });

        it("Should swap funds with AVAX", async function () {
            const { keeperRegistry, avax, dataStreamsConsumer, usdc, me } =
                await loadFixture(setupAVAXFeed);

            await avax
                .connect(me)
                .approve(
                    await dataStreamsConsumer.getAddress(),
                    ethers.parseEther("1000000000000000000")
                );

            const oldBalance = await usdc.balanceOf(me);

            const performData =
                "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002a0000649e2796239591d181cc09f64b3fbc29dad46278ff8da175e27fce7e2039c000000000000000000000000000000000000000000000000000000000341f60d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000029584363bcf642315133c335b3646513c20f049602fc7d933be0d3f6360d300000000000000000000000000000000000000000000000000000000653b90b900000000000000000000000000000000000000000000000000000000653b90b900000000000000000000000000000000000000000000000000000000000015e000000000000000000000000000000000000000000000000000000000000ddc7000000000000000000000000000000000000000000000000000000000653ce239000000000000000000000000000000000000000000000060ce9149c39b4e37c00000000000000000000000000000000000000000000000000000000000000002d4c5747edf14ae28b63b92c83c91c77584270c634f9f21206cb3229a0327f93659c633579b1c6d174bcf2624b28d7a12a92adbda6e7a3afb391065b4a1abccfb000000000000000000000000000000000000000000000000000000000000000272657241ed2db6d7941e609800f734d80d24d25c7234d478838e9bbe2714fa860e97816e590916f82af11908a1adf2c7f4aa3b82b9e5136229abb504780c3fda00000000000000000000000000000000000000000000000000000000000002a000065453f78825bb0dd871fbeca77fd3299256140ccace70282c90babddabd6d00000000000000000000000000000000000000000000000000000000030c4318000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00002c407f448ffe50a15fd5f1ffe4791830c5f8fa39cd971a3d6ae337aef51a000000000000000000000000000000000000000000000000000000000653b90b900000000000000000000000000000000000000000000000000000000653b90b900000000000000000000000000000000000000000000000000000000000015e000000000000000000000000000000000000000000000000000000000000ddc7000000000000000000000000000000000000000000000000000000000653ce23900000000000000000000000000000000000000000000000096465d5b1edad0000000000000000000000000000000000000000000000000000000000000000002ac7da28a51005ae8f6c4026461d0b41b2b2f6b42ff70d24c4d87196a5bc3aba769a202f956eb7936c01a33e9f5dfdd9a6614435e845d1cf3e74cf1418a19430800000000000000000000000000000000000000000000000000000000000000025bd739b8bd690f9024fa344809fd0251dcae2dcd450f04a5a41a8e82162140283c0ab0226fef49c6bdb5296b29affb5f85fb8ec247eb518c1df74269876b7443000000000000000000000000000000000000000000000000000000000000012000000000000000000000000017974d7c6558f00a22ac9ebdf896e39c4f6172b8000000000000000000000000586a52ca64f75b49a72e4caef5b91374257e15380000000000000000000000008fb1e3fc51f3b789ded7557e680551d93ea9d892000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000042307830303032633430376634343866666535306131356664356631666665343739313833306335663866613339636439373161336436616533333761656635316130000000000000000000000000000000000000000000000000000000000000";

            await keeperRegistry.performUpkeep(
                dataStreamsConsumer,
                performData
            );

            const newBalance = await usdc.balanceOf(me);

            expect(newBalance).to.be.greaterThan(oldBalance);
        });
    });
});
