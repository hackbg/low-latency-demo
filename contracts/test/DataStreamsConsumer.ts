import {
    impersonateAccount,
    loadFixture,
} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { expect } from "chai";
import { ethers, upgrades } from "hardhat";
import { networkConfig } from "../helper_hardhat_config";

describe("DataStreamsConsumer", function () {
    async function setupFeed() {
        const [owner] = await ethers.getSigners();

        const {
            feedsId,
            link,
            verifier,
            usdc: usdcAddress,
            weth: wethAddress,
            avax: avaxAddress,
        } = networkConfig[421614];

        const usdc = await ethers.getContractAt("IERC20", usdcAddress);
        const router = await ethers.deployContract("UniswapRouter");
        const keeperRegistry = await ethers.deployContract(
            "KeeperRegistryMock"
        );

        const Consumer = await ethers.getContractFactory("DataStreamsConsumer");
        const dataStreamsConsumer = await upgrades.deployProxy(
            Consumer,
            [await router.getAddress(), verifier, link, Object.values(feedsId)],
            {
                initializer: "initializer",
            }
        );
        const me = await ethers.getImpersonatedSigner(
            "0x17974d7C6558F00a22AC9eBdf896e39c4F6172b8"
        );

        await impersonateAccount("0x17974d7C6558F00a22AC9eBdf896e39c4F6172b8");

        await owner.sendTransaction({
            value: ethers.parseEther("1"),
            to: await me.getAddress(),
        });

        // send eth to consumer to verify reports
        await owner.sendTransaction({
            value: ethers.parseEther("1"),
            to: await dataStreamsConsumer.getAddress(),
        });

        return {
            owner,
            feedsId,
            link,
            verifier,
            usdc,
            router,
            keeperRegistry,
            dataStreamsConsumer,
            me,
            avaxAddress,
            wethAddress,
        };
    }

    async function setupWETHFeed() {
        const {
            owner,
            usdc,
            router,
            keeperRegistry,
            dataStreamsConsumer,
            me,
            wethAddress,
        } = await setupFeed();

        const weth = await ethers.getContractAt("IERC20", wethAddress);

        return {
            weth,
            dataStreamsConsumer,
            owner,
            router,
            keeperRegistry,
            usdc,
            me,
        };
    }

    describe("Swap", function () {
        it.only("Should swap funds with WETH", async function () {
            const { keeperRegistry, weth, dataStreamsConsumer, usdc, me } =
                await loadFixture(setupWETHFeed);

            const performData =
                "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002a0000649e2796239591d181cc09f64b3fbc29dad46278ff8da175e27fce7e2039c000000000000000000000000000000000000000000000000000000000aea2811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000029584363bcf642315133c335b3646513c20f049602fc7d933be0d3f6360d300000000000000000000000000000000000000000000000000000000656e540a00000000000000000000000000000000000000000000000000000000656e540a0000000000000000000000000000000000000000000000000000288e60354bb800000000000000000000000000000000000000000000000000169afc2355180800000000000000000000000000000000000000000000000000000000656fa58a00000000000000000000000000000000000000000000007991b9272d2b4940000000000000000000000000000000000000000000000000000000000000000002deba7f00d61aebc104b37acdac68cdd32817f57a8d775834a2c93641fd91be07a4a19c4a49e95c2c5730ed1aa527926e25e7266397b7a6b3e40c3c6925ad593c00000000000000000000000000000000000000000000000000000000000000025d903782426b33fb347c62b6b14c5a914e39b87536ef5d04d4cc2f08d0f4484648810a07db72257d4382cce9305b0e414a53e4c3939870acc58d008637aeb1fc00000000000000000000000000000000000000000000000000000000000002a000065453f78825bb0dd871fbeca77fd3299256140ccace70282c90babddabd6d000000000000000000000000000000000000000000000000000000000ab42305000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00002c407f448ffe50a15fd5f1ffe4791830c5f8fa39cd971a3d6ae337aef51a000000000000000000000000000000000000000000000000000000000656e540a00000000000000000000000000000000000000000000000000000000656e540a0000000000000000000000000000000000000000000000000000288e60354bb800000000000000000000000000000000000000000000000000169afc2355180800000000000000000000000000000000000000000000000000000000656fa58a000000000000000000000000000000000000000000000001347014888aa105500000000000000000000000000000000000000000000000000000000000000002070b47de9ae4cfa1012364efcf47cb6bfc74ad2838327ed00f5d6ff865140fb6a643eff347bc7a626299208fb5c7a06f7db119a89101dd54b1d77bda3d6aabe3000000000000000000000000000000000000000000000000000000000000000263d630556522daee29ea881e8241945a673cffe44c2573418c07db90b6a398da518f904deb54567937b89dbfbb8bdc49461f209511bd8c8744501f663d54e2ff000000000000000000000000000000000000000000000000000000000000012000000000000000000000000017974d7c6558f00a22ac9ebdf896e39c4f6172b800000000000000000000000029f18736122beef5ddadeb04a6efc138b7f9fad00000000000000000000000002b4342d1bd410538d910298f01cd0e3c02ff809b00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000042307830303032633430376634343866666535306131356664356631666665343739313833306335663866613339636439373161336436616533333761656635316130000000000000000000000000000000000000000000000000000000000000";
            await keeperRegistry.performUpkeep(
                dataStreamsConsumer,
                performData
            );

            // const newBalance = await usdc.balanceOf(me);

            // expect(newBalance).to.be.greaterThan(oldBalance);
        });
    });
});
